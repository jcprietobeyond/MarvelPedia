package beyond.es.marvelpedia.modelo;

import java.util.List;
import beyond.es.marvelpedia.modelo.DaoSession;
import de.greenrobot.dao.DaoException;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT. Enable "keep" sections if you want to edit. 
/**
 * Entity mapped to table "PERSONAJE".
 */
public class Personaje {

    private long id;
    /** Not-null value. */
    private String nombre;
    private String descripcion;
    private String URLImagen;
    private String URLLogo;
    private java.util.Date fechaNacimiento;

    /** Used to resolve relations */
    private transient DaoSession daoSession;

    /** Used for active entity operations. */
    private transient PersonajeDao myDao;

    private List<Comic> comicList;

    public Personaje() {
    }

    public Personaje(long id) {
        this.id = id;
    }

    public Personaje(long id, String nombre, String descripcion, String URLImagen, String URLLogo, java.util.Date fechaNacimiento) {
        this.id = id;
        this.nombre = nombre;
        this.descripcion = descripcion;
        this.URLImagen = URLImagen;
        this.URLLogo = URLLogo;
        this.fechaNacimiento = fechaNacimiento;
    }

    /** called by internal mechanisms, do not call yourself. */
    public void __setDaoSession(DaoSession daoSession) {
        this.daoSession = daoSession;
        myDao = daoSession != null ? daoSession.getPersonajeDao() : null;
    }

    public long getId() {
        return id;
    }

    public void setId(long id) {
        this.id = id;
    }

    /** Not-null value. */
    public String getNombre() {
        return nombre;
    }

    /** Not-null value; ensure this value is available before it is saved to the database. */
    public void setNombre(String nombre) {
        this.nombre = nombre;
    }

    public String getDescripcion() {
        return descripcion;
    }

    public void setDescripcion(String descripcion) {
        this.descripcion = descripcion;
    }

    public String getURLImagen() {
        return URLImagen;
    }

    public void setURLImagen(String URLImagen) {
        this.URLImagen = URLImagen;
    }

    public String getURLLogo() {
        return URLLogo;
    }

    public void setURLLogo(String URLLogo) {
        this.URLLogo = URLLogo;
    }

    public java.util.Date getFechaNacimiento() {
        return fechaNacimiento;
    }

    public void setFechaNacimiento(java.util.Date fechaNacimiento) {
        this.fechaNacimiento = fechaNacimiento;
    }

    /** To-many relationship, resolved on first access (and after reset). Changes to to-many relations are not persisted, make changes to the target entity. */
    public List<Comic> getComicList() {
        if (comicList == null) {
            if (daoSession == null) {
                throw new DaoException("Entity is detached from DAO context");
            }
            ComicDao targetDao = daoSession.getComicDao();
            List<Comic> comicListNew = targetDao._queryPersonaje_ComicList(id);
            synchronized (this) {
                if(comicList == null) {
                    comicList = comicListNew;
                }
            }
        }
        return comicList;
    }

    /** Resets a to-many relationship, making the next get call to query for a fresh result. */
    public synchronized void resetComicList() {
        comicList = null;
    }

    /** Convenient call for {@link AbstractDao#delete(Object)}. Entity must attached to an entity context. */
    public void delete() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.delete(this);
    }

    /** Convenient call for {@link AbstractDao#update(Object)}. Entity must attached to an entity context. */
    public void update() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.update(this);
    }

    /** Convenient call for {@link AbstractDao#refresh(Object)}. Entity must attached to an entity context. */
    public void refresh() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.refresh(this);
    }

}
