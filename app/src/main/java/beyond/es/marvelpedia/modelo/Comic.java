package beyond.es.marvelpedia.modelo;

import beyond.es.marvelpedia.modelo.DaoSession;
import de.greenrobot.dao.DaoException;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT. Enable "keep" sections if you want to edit. 
/**
 * Entity mapped to table "COMIC".
 */
public class Comic {

    private long id;
    private String titulo;
    private String descripcion;
    private long personajeId;

    /** Used to resolve relations */
    private transient DaoSession daoSession;

    /** Used for active entity operations. */
    private transient ComicDao myDao;

    private Personaje personaje;
    private Long personaje__resolvedKey;


    public Comic() {
    }

    public Comic(long id) {
        this.id = id;
    }

    public Comic(long id, String titulo, String descripcion, long personajeId) {
        this.id = id;
        this.titulo = titulo;
        this.descripcion = descripcion;
        this.personajeId = personajeId;
    }

    /** called by internal mechanisms, do not call yourself. */
    public void __setDaoSession(DaoSession daoSession) {
        this.daoSession = daoSession;
        myDao = daoSession != null ? daoSession.getComicDao() : null;
    }

    public long getId() {
        return id;
    }

    public void setId(long id) {
        this.id = id;
    }

    public String getTitulo() {
        return titulo;
    }

    public void setTitulo(String titulo) {
        this.titulo = titulo;
    }

    public String getDescripcion() {
        return descripcion;
    }

    public void setDescripcion(String descripcion) {
        this.descripcion = descripcion;
    }

    public long getPersonajeId() {
        return personajeId;
    }

    public void setPersonajeId(long personajeId) {
        this.personajeId = personajeId;
    }

    /** To-one relationship, resolved on first access. */
    public Personaje getPersonaje() {
        long __key = this.personajeId;
        if (personaje__resolvedKey == null || !personaje__resolvedKey.equals(__key)) {
            if (daoSession == null) {
                throw new DaoException("Entity is detached from DAO context");
            }
            PersonajeDao targetDao = daoSession.getPersonajeDao();
            Personaje personajeNew = targetDao.load(__key);
            synchronized (this) {
                personaje = personajeNew;
            	personaje__resolvedKey = __key;
            }
        }
        return personaje;
    }

    public void setPersonaje(Personaje personaje) {
        if (personaje == null) {
            throw new DaoException("To-one property 'personajeId' has not-null constraint; cannot set to-one to null");
        }
        synchronized (this) {
            this.personaje = personaje;
            personajeId = personaje.getId();
            personaje__resolvedKey = personajeId;
        }
    }

    /** Convenient call for {@link AbstractDao#delete(Object)}. Entity must attached to an entity context. */
    public void delete() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.delete(this);
    }

    /** Convenient call for {@link AbstractDao#update(Object)}. Entity must attached to an entity context. */
    public void update() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.update(this);
    }

    /** Convenient call for {@link AbstractDao#refresh(Object)}. Entity must attached to an entity context. */
    public void refresh() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.refresh(this);
    }

}
