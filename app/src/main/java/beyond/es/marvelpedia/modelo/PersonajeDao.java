package beyond.es.marvelpedia.modelo;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

import beyond.es.marvelpedia.modelo.Personaje;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "PERSONAJE".
*/
public class PersonajeDao extends AbstractDao<Personaje, Long> {

    public static final String TABLENAME = "PERSONAJE";

    /**
     * Properties of entity Personaje.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, long.class, "id", true, "_id");
        public final static Property Nombre = new Property(1, String.class, "nombre", false, "NOMBRE");
        public final static Property Descripcion = new Property(2, String.class, "descripcion", false, "DESCRIPCION");
        public final static Property URLImagen = new Property(3, String.class, "URLImagen", false, "url_imagen");
        public final static Property URLLogo = new Property(4, String.class, "URLLogo", false, "url_logo");
        public final static Property FechaNacimiento = new Property(5, java.util.Date.class, "fechaNacimiento", false, "fecha_nacimiento");
    };

    private DaoSession daoSession;


    public PersonajeDao(DaoConfig config) {
        super(config);
    }
    
    public PersonajeDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
        this.daoSession = daoSession;
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"PERSONAJE\" (" + //
                "\"_id\" INTEGER PRIMARY KEY NOT NULL UNIQUE ," + // 0: id
                "\"NOMBRE\" TEXT NOT NULL ," + // 1: nombre
                "\"DESCRIPCION\" TEXT," + // 2: descripcion
                "\"url_imagen\" TEXT," + // 3: URLImagen
                "\"url_logo\" TEXT," + // 4: URLLogo
                "\"fecha_nacimiento\" INTEGER);"); // 5: fechaNacimiento
        // Add Indexes
        db.execSQL("CREATE INDEX " + constraint + "IDX_PERSONAJE__id ON PERSONAJE" +
                " (\"_id\");");
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"PERSONAJE\"";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, Personaje entity) {
        stmt.clearBindings();
        stmt.bindLong(1, entity.getId());
        stmt.bindString(2, entity.getNombre());
 
        String descripcion = entity.getDescripcion();
        if (descripcion != null) {
            stmt.bindString(3, descripcion);
        }
 
        String URLImagen = entity.getURLImagen();
        if (URLImagen != null) {
            stmt.bindString(4, URLImagen);
        }
 
        String URLLogo = entity.getURLLogo();
        if (URLLogo != null) {
            stmt.bindString(5, URLLogo);
        }
 
        java.util.Date fechaNacimiento = entity.getFechaNacimiento();
        if (fechaNacimiento != null) {
            stmt.bindLong(6, fechaNacimiento.getTime());
        }
    }

    @Override
    protected void attachEntity(Personaje entity) {
        super.attachEntity(entity);
        entity.__setDaoSession(daoSession);
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.getLong(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public Personaje readEntity(Cursor cursor, int offset) {
        Personaje entity = new Personaje( //
            cursor.getLong(offset + 0), // id
            cursor.getString(offset + 1), // nombre
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // descripcion
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // URLImagen
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // URLLogo
            cursor.isNull(offset + 5) ? null : new java.util.Date(cursor.getLong(offset + 5)) // fechaNacimiento
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, Personaje entity, int offset) {
        entity.setId(cursor.getLong(offset + 0));
        entity.setNombre(cursor.getString(offset + 1));
        entity.setDescripcion(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setURLImagen(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setURLLogo(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setFechaNacimiento(cursor.isNull(offset + 5) ? null : new java.util.Date(cursor.getLong(offset + 5)));
     }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(Personaje entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(Personaje entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
